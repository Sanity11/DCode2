/** * VerticalMenu * * Author: Dion Snoeijen * Date: 20-02-2010 * * Position Assets into Vertical Menu with sub items. * * TODO: * - Vereenvoudigen + extra level toevoegen */package com.positioners{		import com.greensock.TweenMax;	import com.initial.GlobalStage;		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;		public class VerticalMenu extends Sprite	{		private var menuStructure			:Array;		private var sbStructure				:Array;		private var targetMenuStructure		:Array;		private var targetSbMenuStructure	:Array;		private var sbContainerCatch		:Boolean;		private var sbContainerMask			:Sprite;		private var sbContainer				:Sprite;				public var broadCastMenuHeight		:Boolean;		public var menuHeight				:Number; 		 		private var firstRun				:Boolean;		private var tweenTime				:Number;				private var initY					:Number;				public var debugging				:Boolean = true;				public function VerticalMenu(menuItems:Array, tweenSpeed:Number = 0.5, broadCastMH:Boolean = false):void		{			initY = 0;			firstRun = true;						broadCastMenuHeight = broadCastMH;						tweenTime = tweenSpeed;						menuStructure = new Array();			targetMenuStructure = new Array();			sbStructure = new Array();			targetSbMenuStructure = new Array();									var subOrNot:int;						for each(var item:* in menuItems)			{				subOrNot = 0;								var i:int;				var j:int;				var sbMaskName:int;				var mainItemName:int;								for each(var button:* in item)				{					i++;					if(i == 1)					{						// -------------------------						//	Main Buttons						// -------------------------						sbContainerCatch = false;												button.y = initY;						button.name = j;													//button //count //Expos	  //mainCount   //Inpos						menuStructure.push(new Array(button, j, initY, mainItemName, initY));						button.addEventListener(MouseEvent.CLICK, menuClick);												addChild(button);												initY += button.height;												mainItemName++;					}					else					{						if(!sbContainerCatch)						{							sbMaskName++;														sbContainerMask = new Sprite();							sbContainerMask.y = 0;							sbContainerMask.name = 'sbMask_' + String(sbMaskName);														addChild(sbContainerMask);														sbContainer = new Sprite();							sbContainer.name = 'sbContainer_' + String(sbMaskName) + '_' + j;							sbContainer.y = j * button.height;							sbContainer.mask = sbContainerMask;							sbContainer.addChild(sbContainerMask);							sbStructure.push(sbContainer);														addChild(sbContainer);						}												sbContainerMask.graphics.clear();						sbContainerMask.graphics.beginFill(0x000000, 0.2);						sbContainerMask.graphics.drawRect(0, 0, button.width, button.height * subOrNot);						sbContainerMask.graphics.endFill();												sbContainerCatch = true;												button.y = (subOrNot - 1) * button.height;						button.x = 0;						button.name = j + '_' + sbMaskName;												menuStructure.push(new Array(button, j, j * button.height, j - 1));												button.addEventListener(MouseEvent.CLICK, initExternalFunction);												sbContainer.addChild(button);					}					j++;					subOrNot++;				}				i = 0;			}						initialPositions();		}				private function initialPositions():void		{				var splitButtonName:Array = new Array();			var sbCompare:String;			var sbContainerSelector:int;						targetMenuStructure[0] = 0;						for (var i:int = 0 ; i < menuStructure.length ; i++)			{				splitButtonName = menuStructure[i][0].name.split("_");								if(menuStructure[i][4])				{					if(firstRun)					{						menuStructure[i][0].y = menuStructure[i][4];						menuStructure[i][0].addEventListener(MouseEvent.MOUSE_DOWN, menuClick);					}					targetMenuStructure[i] = menuStructure[i][4];				}								if(splitButtonName[1])				{					if(sbCompare != splitButtonName[1])					{						if(firstRun)						{							sbStructure[sbContainerSelector].mask.height = 0;						}						else						{							TweenMax.to(sbStructure[sbContainerSelector].mask, tweenTime, {height:0});						}												if(firstRun)						{							sbStructure[sbContainerSelector].y = menuStructure[menuStructure[i][3]][0].y + menuStructure[i][0].height;						}												targetSbMenuStructure[sbContainerSelector] = targetMenuStructure[menuStructure[i][3]] + menuStructure[i][0].height;												sbContainerSelector++;					}					sbCompare = splitButtonName[1];				}			}						firstRun = false;						if(broadCastMenuHeight)			{				addEventListener(Event.ENTER_FRAME, setMenuHeight);			}		}				private function setMenuHeight(e:Event):void		{			if(this.debugging)				trace(menuStructure[menuStructure.length - 1][0].y + menuStructure[menuStructure.length - 1][0].height);						menuHeight = menuStructure[menuStructure.length - 1][0].y + menuStructure[menuStructure.length - 1][0].height;		}				private function menuClick(e:MouseEvent):void		{			initialPositions();			ef();						var splitName:Array = new Array();			splitName = e.currentTarget.name.split("_");						var selector:int = int(splitName[0]);						// ------------------------			//	Check of we met een sub menu item te maken hebben. Zo ja, niks doen.			// ------------------------			if(!splitName[1])			{				// ------------------------				//	Bepaal de eventuele positie van een sub knop. 				// ------------------------				var compare:Number = targetMenuStructure[selector] + menuStructure[selector][0].height;								// ------------------------				//	Zoek in de sbStructure of er sub knoppen aanwezig zijn.				// ------------------------				var targetMenuStructureCounter:int;				 				for each(var sbC:* in sbStructure)				{					if(compare == targetSbMenuStructure[targetMenuStructureCounter])					{						var animDist:Number = sbC.height;						TweenMax.to(sbC.mask, tweenTime, {height:animDist});												// ------------------------						//	Bepaal nieuwe posities voor hoofd knoppen.						// ------------------------						for (var i:int = int(menuStructure[selector + sbC.numChildren][0].name) ; i < menuStructure.length ; i++)						{							var splitSecName:Array = new Array();							splitSecName = menuStructure[i][0].name.split("_");														if(!splitSecName[1])							{								targetMenuStructure[i] = targetMenuStructure[i] + animDist;							}						}												// ------------------------						//	Bepaal nieuwe posities voor sub knoppen.						// ------------------------						var k:int;						for each(var sbCC:* in sbStructure)						{							var splitSBName:Array = new Array();							splitSBName = sbCC.name.split("_");														targetSbMenuStructure[k] = targetMenuStructure[splitSBName[2] - 1] + menuStructure[splitSBName[2] - 1][0].height;														k++;						}					}										targetMenuStructureCounter++;				}			}						animateMenu();		}				private function animateMenu():void		{			var splitButtonName:Array = new Array();						var bSelector:int;			for each(var mainButton:* in menuStructure)			{					splitButtonName = mainButton[0].name.split("_");								if(!splitButtonName[1])				{					TweenMax.to(mainButton[0], tweenTime, {y:targetMenuStructure[bSelector]});				}								bSelector++;			}						bSelector = 0;						for each(var subButton:* in sbStructure)			{				TweenMax.to(subButton, tweenTime, {y:targetSbMenuStructure[bSelector]});				bSelector++;				}		}				private function initExternalFunction(e:MouseEvent):void		{			ef();		}				private function ef():void		{			// ------------------------			//	Deze functie wordt aangeroepen bij een klik op buttons... .mss later handig			// ------------------------		}	}}